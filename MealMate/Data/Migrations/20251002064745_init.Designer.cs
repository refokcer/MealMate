// <auto-generated />
using System;
using MealMate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MealMate.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251002064745_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MealMate.Models.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Instructions")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PreparationMinutes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Классический полезный завтрак",
                            ImageUrl = "https://images.unsplash.com/photo-1504674900247-0877df9cc836",
                            Instructions = "Смешайте овсянку с молоком и варите 5 минут. Добавьте любимые ягоды.",
                            Name = "Овсяная каша с молоком",
                            PreparationMinutes = 10
                        },
                        new
                        {
                            Id = 2,
                            Description = "Лёгкий вариант для бодрого утра",
                            ImageUrl = "https://images.unsplash.com/photo-1499636136210-6f4ee915583e",
                            Instructions = "Поджарьте хлеб, разомните авокадо, добавьте яйцо-пашот и зелень.",
                            Name = "Тост с авокадо и яйцом",
                            PreparationMinutes = 12
                        },
                        new
                        {
                            Id = 3,
                            Description = "Простой обед для всей семьи",
                            ImageUrl = "https://images.unsplash.com/photo-1604908177636-01c02c9936a1",
                            Instructions = "Обжарьте курицу, добавьте перец и варёный рис. Приправьте по вкусу.",
                            Name = "Курица с рисом и перцем",
                            PreparationMinutes = 25
                        });
                });

            modelBuilder.Entity("MealMate.Models.DishProduct", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Quantity")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("DishId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("DishProducts");

                    b.HasData(
                        new
                        {
                            DishId = 1,
                            ProductId = 2,
                            Quantity = "200 мл"
                        },
                        new
                        {
                            DishId = 1,
                            ProductId = 3,
                            Quantity = "60 г"
                        },
                        new
                        {
                            DishId = 2,
                            ProductId = 1,
                            Quantity = "1 шт"
                        },
                        new
                        {
                            DishId = 2,
                            ProductId = 4,
                            Quantity = "1/2 шт"
                        },
                        new
                        {
                            DishId = 2,
                            ProductId = 5,
                            Quantity = "1 ломтик"
                        },
                        new
                        {
                            DishId = 2,
                            ProductId = 9,
                            Quantity = "по вкусу"
                        },
                        new
                        {
                            DishId = 3,
                            ProductId = 6,
                            Quantity = "200 г"
                        },
                        new
                        {
                            DishId = 3,
                            ProductId = 7,
                            Quantity = "1 шт"
                        },
                        new
                        {
                            DishId = 3,
                            ProductId = 8,
                            Quantity = "150 г"
                        },
                        new
                        {
                            DishId = 3,
                            ProductId = 9,
                            Quantity = "по вкусу"
                        });
                });

            modelBuilder.Entity("MealMate.Models.MealGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccentColor")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MealGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccentColor = "#F97316",
                            Description = "Сочное утро",
                            Name = "Завтрак"
                        },
                        new
                        {
                            Id = 2,
                            AccentColor = "#2563EB",
                            Description = "Сытные идеи",
                            Name = "Обед"
                        },
                        new
                        {
                            Id = 3,
                            AccentColor = "#7C3AED",
                            Description = "Теплые семейные вечера",
                            Name = "Ужин"
                        },
                        new
                        {
                            Id = 4,
                            AccentColor = "#10B981",
                            Description = "Быстрые перекусы",
                            Name = "Закуски"
                        });
                });

            modelBuilder.Entity("MealMate.Models.MealGroupDish", b =>
                {
                    b.Property<int>("MealGroupId")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.HasKey("MealGroupId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("MealGroupDishes");

                    b.HasData(
                        new
                        {
                            MealGroupId = 1,
                            DishId = 1
                        },
                        new
                        {
                            MealGroupId = 1,
                            DishId = 2
                        },
                        new
                        {
                            MealGroupId = 2,
                            DishId = 3
                        },
                        new
                        {
                            MealGroupId = 3,
                            DishId = 3
                        });
                });

            modelBuilder.Entity("MealMate.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Основные",
                            Name = "Яйца",
                            Notes = "Свежие куриные"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Молочные",
                            Name = "Молоко"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Крупы",
                            Name = "Овсяные хлопья"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Овощи",
                            Name = "Авокадо"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Выпечка",
                            Name = "Цельнозерновой хлеб"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Белки",
                            Name = "Куриное филе"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Овощи",
                            Name = "Сладкий перец"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Крупы",
                            Name = "Рис басмати"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Свежая",
                            Name = "Зелень"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MealMate.Models.DishProduct", b =>
                {
                    b.HasOne("MealMate.Models.Dish", "Dish")
                        .WithMany("DishProducts")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealMate.Models.Product", "Product")
                        .WithMany("DishProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MealMate.Models.MealGroupDish", b =>
                {
                    b.HasOne("MealMate.Models.Dish", "Dish")
                        .WithMany("MealGroupDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MealMate.Models.MealGroup", "MealGroup")
                        .WithMany("MealGroupDishes")
                        .HasForeignKey("MealGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("MealGroup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MealMate.Models.Dish", b =>
                {
                    b.Navigation("DishProducts");

                    b.Navigation("MealGroupDishes");
                });

            modelBuilder.Entity("MealMate.Models.MealGroup", b =>
                {
                    b.Navigation("MealGroupDishes");
                });

            modelBuilder.Entity("MealMate.Models.Product", b =>
                {
                    b.Navigation("DishProducts");
                });
#pragma warning restore 612, 618
        }
    }
}

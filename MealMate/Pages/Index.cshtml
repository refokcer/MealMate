@page "{?focusGroup}"
@model IndexModel
@{
    ViewData["Title"] = "MealMate ‚Äî –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∏—Ç–∞–Ω–∏—è";

    var groups = Model.MealGroups;
    var selectedGroup = Model.SelectedGroup;
    var heroDish = selectedGroup?.MealGroupDishes
        .Select(link => link.Dish)
        .OrderBy(d => d.Name)
        .FirstOrDefault();
}

<section id="hero" class="hero">
    <div class="hero-text">
        <p class="hero-label">–£—é—Ç–Ω—ã–π –¥–æ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–∞—Ä–µ–ª–∫–∏</p>
        <h1>MealMate –ø–æ–º–æ–≥–∞–µ—Ç —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥ –∏ —É–∂–∏–Ω –±–µ–∑ —Å—É–µ—Ç—ã</h1>
        <p class="hero-description">
            –°–æ–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ª—é–±–∏–º—ã—Ö –±–ª—é–¥, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∏—Ö –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ —Ä–µ—à–∞–π—Ç–µ, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å.
            –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ –∏–¥–µ–∏, –Ω–∞–≤–æ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –≤ –∑–∞–ø–∞—Å–∞—Ö –∏ –¥–µ—Ä–∂–∏—Ç–µ –≤—Å—é –∫—É—Ö–æ–Ω–Ω—É—é –º–∞–≥–∏—é –ø–æ–¥ —Ä—É–∫–æ–π.
        </p>
        <div class="hero-actions">
            <a class="button primary" asp-page="/Dishes/Index">–°–æ–±—Ä–∞—Ç—å –º–µ–Ω—é</a>
            <a class="button ghost" asp-page="/MealGroups/Index">–ö–æ–ª–ª–µ–∫—Ü–∏–∏ –±–ª—é–¥</a>
        </div>
        <div class="hero-stats">
            <div class="stat-card">
                <span class="stat-number">@Model.TotalMealGroups</span>
                <span class="stat-label">–≥—Ä—É–ø–ø—ã –±–ª—é–¥</span>
            </div>
            <div class="stat-card">
                <span class="stat-number">@Model.TotalDishes</span>
                <span class="stat-label">–≥–æ—Ç–æ–≤—ã—Ö –∏–¥–µ–π</span>
            </div>
            <div class="stat-card">
                <span class="stat-number">@Model.TotalUniqueIngredients</span>
                <span class="stat-label">—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤</span>
            </div>
        </div>
    </div>
    <div class="hero-visual">
        <div class="glass-card">
            <h3>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –≤—ã–±–æ—Ä</h3>
            <p class="glass-subtitle">
                @if (selectedGroup is not null)
                {
                    <span>@(selectedGroup.Name)</span>
                }
                else
                {
                    <span>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É –±–ª—é–¥</span>
                }
            </p>
            @if (heroDish is not null)
            {
                var heroIngredients = heroDish.DishProducts
                    .Select(dp => dp.Product?.Name)
                    .Where(name => !string.IsNullOrWhiteSpace(name))
                    .Distinct()
                    .Take(4)
                    .ToList();
                <div class="glass-dish">
                    <h4>@heroDish.Name</h4>
                    @if (!string.IsNullOrWhiteSpace(heroDish.Description))
                    {
                        <p>@heroDish.Description</p>
                    }
                    @if (heroIngredients.Count > 0)
                    {
                        <ul>
                            @foreach (var ingredient in heroIngredients)
                            {
                                <li>@ingredient</li>
                            }
                        </ul>
                    }
                    @if (heroDish.PreparationMinutes.HasValue)
                    {
                        <span class="tag">~@heroDish.PreparationMinutes.Value –º–∏–Ω—É—Ç</span>
                    }
                </div>
            }
            else
            {
                <div class="glass-empty">–ü–æ–¥–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é.</div>
            }
        </div>
    </div>
</section>

<section id="groups" class="groups">
    <header class="section-heading">
        <div>
            <p class="section-label">–ö–æ–ª–ª–µ–∫—Ü–∏–∏</p>
            <h2>–ì—Ä—É–ø–ø—ã –±–ª—é–¥ –¥–ª—è –ª—é–±–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</h2>
        </div>
        <p class="section-description">
            –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–æ—Ä–∫–∏ –±–ª—é–¥ –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞, –æ–±–µ–¥–∞, —É–∂–∏–Ω–∞, –±—ã—Å—Ç—Ä—ã—Ö –ø–µ—Ä–µ–∫—É—Å–æ–≤ –∏–ª–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö.
            –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –∏ –ø–æ–¥–±–∏—Ä–∞–π—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.
        </p>
    </header>
    <div class="group-tabs">
        @foreach (var group in groups)
        {
            var isActive = selectedGroup?.Id == group.Id;
            var accent = !string.IsNullOrWhiteSpace(group.AccentColor) ? group.AccentColor : "#f97316";
            var groupIngredients = group.MealGroupDishes
                .SelectMany(link => link.Dish.DishProducts)
                .Select(dp => dp.Product?.Name)
                .Where(name => !string.IsNullOrWhiteSpace(name))
                .Distinct()
                .Count();
            var groupBadge = string.IsNullOrWhiteSpace(group.Name) ? "üçΩ" : group.Name.Substring(0, 1).ToUpperInvariant();
            <a class="group-tab @(isActive ? "active" : string.Empty)" asp-page="./Index" asp-route-focusGroup="@group.Id" style="--accent-color: @accent">
                <div class="group-info">
                    <span class="group-icon">@groupBadge</span>
                    <div>
                        <h3>@group.Name</h3>
                        <p>@(string.IsNullOrWhiteSpace(group.Description) ? "–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –∏–¥–µ—é." : group.Description)</p>
                    </div>
                </div>
                <div class="group-meta">
                    <span>@group.MealGroupDishes.Count –±–ª—é–¥</span>
                    <span>@groupIngredients –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤</span>
                </div>
            </a>
        }
        <a class="group-tab ghost" asp-page="/MealGroups/Index">
            <div class="group-info">
                <span class="group-icon">Ôºã</span>
                <div>
                    <h3>–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞</h3>
                    <p>–°–æ–±–µ—Ä–∏—Ç–µ –ø–æ–¥–±–æ—Ä–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.</p>
                </div>
            </div>
            <div class="group-meta">
                <span>–£–ø—Ä–∞–≤–ª—è—Ç—å</span>
            </div>
        </a>
    </div>
</section>

<section id="planner" class="planner">
    <div class="planner-grid">
        <div class="dish-list">
            <header class="section-heading">
                <div>
                    <p class="section-label">–ú–µ–Ω—é</p>
                    <h2>@(selectedGroup is null ? "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É" : selectedGroup.Name)</h2>
                </div>
                @if (selectedGroup is not null)
                {
                    <p class="section-description">
                        @(string.IsNullOrWhiteSpace(selectedGroup.Description) ? "–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã —ç—Ç–∞ –ø–æ–¥–±–æ—Ä–∫–∞ –±—ã–ª–∞ –µ—â—ë –ø–æ–ª–µ–∑–Ω–µ–µ." : selectedGroup.Description)
                    </p>
                }
            </header>
            @if (selectedGroup?.MealGroupDishes.Any() == true)
            {
                var orderedDishes = selectedGroup.MealGroupDishes
                    .Select(link => link.Dish)
                    .OrderBy(d => d.Name)
                    .ToList();
                <div class="dish-grid">
                    @foreach (var dish in orderedDishes)
                    {
                        var ingredients = dish.DishProducts
                            .Select(dp => dp.Product?.Name)
                            .Where(name => !string.IsNullOrWhiteSpace(name))
                            .Distinct()
                            .ToList();
                        <article class="dish-card">
                            <header>
                                <div class="dish-title">
                                    <span class="dish-icon">üç≤</span>
                                    <h3>@dish.Name</h3>
                                </div>
                                <a class="ghost" asp-page="/Dishes/Index" asp-route-focus="@dish.Id">–û—Ç–∫—Ä—ã—Ç—å</a>
                            </header>
                            @if (!string.IsNullOrWhiteSpace(dish.Description))
                            {
                                <p>@dish.Description</p>
                            }
                            @if (ingredients.Count > 0)
                            {
                                <ul>
                                    @foreach (var ingredient in ingredients)
                                    {
                                        <li>@ingredient</li>
                                    }
                                </ul>
                            }
                            <footer>
                                @if (dish.PreparationMinutes.HasValue)
                                {
                                    <span class="tag">@dish.PreparationMinutes.Value –º–∏–Ω—É—Ç</span>
                                }
                                <a class="recipe-link" asp-page="/Dishes/Index" asp-route-focus="@dish.Id">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</a>
                            </footer>
                        </article>
                    }
                </div>
            }
            else if (selectedGroup is not null)
            {
                <div class="empty-state">
                    <h3>–ü–æ–∫–∞ –ø—É—Å—Ç–æ</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ –±–ª—é–¥–æ –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É –∏ MealMate –ø–æ–¥—Å–∫–∞–∂–µ—Ç, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å.</p>
                    <a class="button primary" asp-page="/Dishes/Index" asp-route-group="@selectedGroup.Id">–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ</a>
                </div>
            }
            else
            {
                <div class="empty-state">
                    <h3>–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –±–ª—é–¥ –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ.</p>
                </div>
            }
        </div>
        <aside class="actions">
            <div class="form-card">
                <h3>–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ</h3>
                <p class="form-caption">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å–≤–µ–∂–∏–º–∏ –∏–¥–µ—è–º–∏.</p>
                <a class="button primary" asp-page="/Dishes/Create">–ù–æ–≤–æ–µ –±–ª—é–¥–æ</a>
                <a class="button ghost" asp-page="/Dishes/Index">–í—Å–µ –±–ª—é–¥–∞</a>
            </div>
            <div class="form-card">
                <h3>–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞</h3>
                <p class="form-caption">–°–æ–±–µ—Ä–∏—Ç–µ –ø–æ–¥–±–æ—Ä–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.</p>
                <a class="button primary" asp-page="/MealGroups/Create">–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É</a>
                <a class="button ghost" asp-page="/MealGroups/Index">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏</a>
            </div>
            @if (Model.HighlightedIngredients.Any())
            {
                <div class="ingredient-cloud">
                    <h3>–ß–∞—Å—Ç—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã</h3>
                    <div class="chips">
                        @foreach (var ingredient in Model.HighlightedIngredients)
                        {
                            <span>@ingredient</span>
                        }
                    </div>
                </div>
            }
        </aside>
    </div>
</section>

@if (Model.UngroupedDishes.Any())
{
    <section id="ungrouped" class="ungrouped">
        <header class="section-heading">
            <div>
                <p class="section-label">–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</p>
                <h2>–ë–ª—é–¥–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏</h2>
            </div>
            <a class="button ghost" asp-page="/Dishes/Index">–ù–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—ã</a>
        </header>
        <div class="dish-grid compact">
            @foreach (var dish in Model.UngroupedDishes)
            {
                var ingredients = dish.DishProducts
                    .Select(dp => dp.Product?.Name)
                    .Where(name => !string.IsNullOrWhiteSpace(name))
                    .Distinct()
                    .ToList();
                <article class="dish-card">
                    <header>
                        <div class="dish-title">
                            <span class="dish-icon">‚ú®</span>
                            <h3>@dish.Name</h3>
                        </div>
                        <a class="ghost" asp-page="/Dishes/Index" asp-route-focus="@dish.Id">–û—Ç–∫—Ä—ã—Ç—å</a>
                    </header>
                    @if (!string.IsNullOrWhiteSpace(dish.Description))
                    {
                        <p>@dish.Description</p>
                    }
                    @if (ingredients.Count > 0)
                    {
                        <ul>
                            @foreach (var ingredient in ingredients)
                            {
                                <li>@ingredient</li>
                            }
                        </ul>
                    }
                </article>
            }
        </div>
    </section>
}
